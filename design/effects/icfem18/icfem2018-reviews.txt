Dear Alex Potanin,

Thank you very much for your contribution to ICFEM 2018. On behalf of the Program Committee, we are pleased to inform that your paper:

Capabilities: Effects for Free

has been accepted for presentation at the conference and publication in the conference proceedings. Congratulations!

This year, we received 66 valid submissions, where each paper has been extensively reviewed and discussed by at least three members of the Program Committee. Finally, 22 papers were selected for the publication, with the acceptance rate of 33.3%.

When preparing the final camera ready version, please make sure to address the comments and suggestions from the reviewers, as enclosed below in this email.

The final version should be uploaded electronically through the EasyChair system, which contains the following:

(a) a zipped file containing all the source files
(b) PDF version of the camera-ready paper
(c) the signed copyright form (available on ICFEM 2018 website)

The deadline for submitting the final version of your paper is 29 July 2018. Please note that the camera ready version of the paper should not exceed 16 pages (including references) in the Springer's LNCS format.

Please also note that the author registration due date is 29 July 2018. Papers will be published in the proceedings and included in the program, only when at least one of the authors registers. For authors of multiple papers, each paper must be accompanied by a separate registration with full payment.

We look forward to receiving the final version of your paper, and seeing you in Gold Coast, Australia!

Sincerely,

ICFEM 2018 Program Co-Chairs
Jing Sun and Meng Sun


----------------------- REVIEW 1 ---------------------
PAPER: 56
TITLE: Capabilities: Effects for Free
AUTHORS: Aaron Craig, Alex Potanin, Lindsay Groves and Jonathan Aldrich

Overall evaluation: 1 (weak accept)

----------- Overall evaluation -----------
This paper presents a calculus (CC) which allows type-checking of resource use in programs supporting object capabilities. It does this with minimal annotation of code, instead inferring the effects of unannotated code form the capabilities passed to it by annotated code surrounding it.

While the ideas are worthwhile and interesting, the paper suffers a little from its presentation. In some places too much background knowledge is assumed. For example, on page 2 we are presented with a motivating example program (in Wyvern I presume) but the notation is not explained:  is “effect’ a keyword, and is the effect an effect of log or of e? what is Unit (for readers not familiar)? and what is e (this only becomes apparent several sentences later)? In Figure 2, explain the braces around File and Socket. 

There are also some places where the explanation is lacking. For example, what is the meaning of the epsilon subscript in annotated types (Figure 4), what is the meaning of | in Figure 5, what is the meaning of “with” in a type, e.g., Figure 9? All of these can be deduced with a little effort, but it would be good if they would be described when they first occur. 

In Section 3, you say that the Wyvern program is translated to CC "using the techniques of the previous section". However, the previous section does not include any techniques for translating code to CC. How the translation is carried out is not previously described. 

Minor comments:
page 4, The new form -> The new form of expression
Figure 4, delete 7
page 7, An import should only … only    (delete one of the only’s)
page 9, (which is at most \epsilon) -> (which is at most \epsilon_s)
page 11, File.write -> File.append    (occurs twice in text before code)
page 11, functino -> function
page 15, Mark [16] -> Miller [16]
References: several poorly formatted references, e.g.,
	1 author list
	2 java -> Java
	4 title and conference swapped, Ieee -> IEEE, european -> European
	5 seems to be two conferences and no title
	15 missing organisation for tech report


----------------------- REVIEW 2 ---------------------
PAPER: 56
TITLE: Capabilities: Effects for Free
AUTHORS: Aaron Craig, Alex Potanin, Lindsay Groves and Jonathan Aldrich

Overall evaluation: 1 (weak accept)

----------- Overall evaluation -----------
Summary:
The paper proposes a lightweight mechanism to integrate
capability-based reasoning into languages.
The main idea explored by the authors is that the effect of an unannotated
expression can be given a bound based on the effects latent in variables that are
in scope. To formalise the idea, the authors define a typed
lambda calculus with a simple notion of capabilities. This language
allows the nesting of unannotated code inside annotated code in a controlled, capability-safe
manner. One can reason about the effects of the unannotated code by inspecting the
capabilities passed into it from its annotated surroundings. 
The paper shows which are the challenges of this kind of reasoning 
(most notably involving higher-order programs) and how they can be solved.
The authors also show how the practical situations can be modeled and present
a range of examples to illustrate the benefits of a
capability-flavoured effect system.


Evaluation:
The presented approach allows code to be incrementally annotated
and encourages the modular reasoning. It also seems to be a promising alternative 
to the effect-based systems.
The paper is well written and the examples help the reader to understand the ideas.


----------------------- REVIEW 3 ---------------------
PAPER: 56
TITLE: Capabilities: Effects for Free
AUTHORS: Aaron Craig, Alex Potanin, Lindsay Groves and Jonathan Aldrich

Overall evaluation: 2 (accept)

----------- Overall evaluation -----------
The paper discusses the problem of bounding resource use by imported code.  Its premise is that, in a capability-safe language, reasoning can be enhanced by formalising the intuitive notion that authority is only acquired by capability passing.  Thereto, it considers `effects systems', a lambda calculus which requires the code be fully annotated by the effects that can be incurred in computation.  This allows formal reasoning about authority bounds but entails a large overhead for developers.  Given that effects incurred are directly derived from capabilities held, the paper shows that the effects system based on capabilities in a capability-safe language can be loosened to allow unannotated code inside special `import' statements.  These import statements identify the bounding authority (effects the unannotated code is allowed to incur) and the imported capabilities (all that appear in the annotated code).  The ensuing `Capability Calculus' (CC) provides a type-checking sys!
tem (when dynamical creation/destruction of capabilities is not allowed) that (statically) soundly bounds the authority in computation.

This is presumably a suitable topic for ICFEM,  the arguments seem believable, and there are a number of examples which help the reader.  My only problem with the paper is that at least I, with no previous knowledge of effects systems or the ideas in this paper, found it very difficult to read without the extended Technical Report by the same authors.  

In that report the capability-based effects system (fully annotated, without `import') is first defined (called OC there), and the syntax (and the point of it) fully defined.  The CC is only then introduced, which really just requires elaboration of the import statement.  The Technical Report also makes the work more relevant by discussing how a subset of at least one language (called `Wyvern') can be translated into the CC for purposes of reasoning about authority bounds.  

The current paper just lifts parts of the technical report directly, and without the remainder the result is not completely smooth.  I think the authors should rethink the exposition, for uneducated readers such as myself, accounting at least for the following comments.
\begin{enumerate}
\item
p4 near the end: one might grasp from the previous that a capability is identified with a resource literal, but here $\hat{e}$ being identified as a capability shows that the users have a higher-order notion.  This could be spelled out a little (it is important later -- e.g., in the $\epsilon$-import discussion).
\item
p5 Fig 4: the $\rightarrow_{\epsilon}$ notation is not explained, nor is the use of $\bar{r}$ to denote a sequence of $r$.
\item
p5 first line: seems to me it might be better to say "$\hat{e}$ is bound to the variable x inside e".
\item
p5: it might be useful to observe that in expressions variables are only substituted by values, thus the `operation' does not introduce effects.
\item
p6: the {\bf with} notation is unexplained, which really is detrimental to the discussion.  Similarly, the the $\mid \epsilon$ notation on reductions.
\item
p8 middle: type should be ${\tt Unit} \rightarrow {\tt Unit}$, not the lower case unit.
\end{enumerate}

The following are just observations that I perceive as typos.   If they're not this may just reflect my misunderstanding (the authors may then care to adjust the paper to educate me better).  But if so they should be corrected.
\begin{enumerate}
\item[O1.]
p11 Section 3.1: the text says the function {\tt log} incurs {\tt File.write} but the code suggests {\tt File.append}
\item[O1.]
p12 Section 3.2: the text says  {\tt client.run} is annotated with $\emptyset$ but the code suggests $\{{\tt File.append}\}$.
\item[O3.]
p13: in the {\tt MakeLogger} code it is surely better to rename the bound variable in the import statement (something other than {\tt f} ({\tt = f})).
\end{enumerate}